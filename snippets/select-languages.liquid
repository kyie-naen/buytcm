{% if localization.available_languages.size > 1 %}
    <localization-form class="my-auto">
      {% form 'localization' %}
        <div class="disclosure">
          <div role="button" class="disclosure__button" aria-expanded="false" aria-controls="LanguageList" tabindex="0">
            {% if localization.language.iso_code == 'en' %}
                <span class="d-none d-sm-block">{% render 'icon-us' %}</span> <span>EN</span>
            {% elsif localization.language.iso_code == 'zh-TW' %}
                <span class="d-none d-sm-block">{% render 'icon-china' %}</span> <span>CN</span>
            {% endif %}
          </div>
  
          <ul id="LanguageList" role="list" class="disclosure__list" hidden>
            {% for language in localization.available_languages %}
              <li class="disclosure__item px-3" tabindex="-1">
                <a href="#"{% if language.iso_code == localization.language.iso_code %} aria-current="true"{% endif %} hreflang="{{ language.iso_code }}" lang="{{ language.iso_code }}" data-value="{{ language.iso_code }}" class="d-flex gap-2">
                    {% if language.iso_code == 'en' %}
                        {% render 'icon-us' %} <span class="my-auto">EN</span>
                    {% elsif language.iso_code == 'zh-TW' %}
                        {% render 'icon-china' %} <span class="my-auto">CN</span>
                    {% endif %}
                </a>
              </li>
            {% endfor %}
          </ul>
  
          <input type="hidden" name="language_code" value="{{ localization.language.iso_code }}">
        </div>
      {% endform %}
    </localization-form>
  {% endif %}
  



<style>
/* Posisi tombol disclosure */
.disclosure {
  position: relative; /* Menjadikan .disclosure sebagai konteks relatif untuk dropdown */
  display: inline-block; /* Agar tombol dan dropdown berbaris secara inline */
}

/* Menyembunyikan dropdown secara default */
.disclosure__list {
  display: none; /* Dropdown tersembunyi secara default */
  list-style: none;
  padding: 0;
  margin: 0;
  background-color: white;
  border: 1px solid #ccc;
  position: absolute; /* Dropdown diatur secara absolut terhadap elemen induk .disclosure */
  z-index: 9999; /* Pastikan berada di atas elemen lainnya */
  top: 100%; /* Menempatkan dropdown tepat di bawah tombol */
  left: 0;
  max-height: 300px; /* Menambahkan batas ketinggian untuk scrollbar jika item terlalu banyak */
  overflow-y: auto; /* Jika ada banyak item, scroll secara vertikal */
}

/* Menampilkan dropdown jika class .show ditambahkan */
.disclosure__list.show {
  display: block; /* Menampilkan dropdown ketika tombol diklik */
}

/* Menyembunyikan teks bahasa pada tombol */
.disclosure__button span {
  font-size: 12px;
  font-weight: 700;
}

/* Menampilkan ikon negara */
.disclosure__button img {
  width: 20px; /* Ukuran ikon negara */
  height: auto;
  margin-right: 10px;
  display: inline-block; /* Membuat ikon tampil dalam satu baris dengan caret */
}

/* Menampilkan ikon caret pada tombol */
.disclosure__button svg {
  margin-left: 10px;
  width: 20px;
  height: 20px;
  fill: currentColor;
  border-radius: 50%;
}

/* Menandakan bahasa yang dipilih */
.disclosure__item a[aria-current="true"] {
  font-weight: bold; /* Menandakan bahasa yang sedang dipilih */
  color: #254F2E;
}

</style>

<script>
// Menambahkan event listener ke tombol disclosure untuk menampilkan atau menyembunyikan dropdown
document.querySelector('.disclosure__button').addEventListener('click', function() {
  var langList = document.getElementById('LanguageList');
  
  // Toggle the visibility of the language list
  langList.classList.toggle('show');
  
  // Ubah status aria-expanded tombol
  var isExpanded = langList.classList.contains('show');
  this.setAttribute('aria-expanded', isExpanded);
});

// Optional: Menutup dropdown jika klik di luar
document.addEventListener('click', function(event) {
  var dropdown = document.querySelector('.disclosure__list');
  var button = document.querySelector('.disclosure__button');
  
  // Menutup dropdown jika klik di luar area dropdown
  if (!dropdown.contains(event.target) && !button.contains(event.target)) {
    dropdown.classList.remove('show');
    button.setAttribute('aria-expanded', 'false');
  }
});


class LocalizationForm extends HTMLElement {
  constructor() {
    super();
    this.elements = {
      input: this.querySelector('input[name="language_code"]'),
      button: this.querySelector('.disclosure__button'),
      panel: this.querySelector('.disclosure__list'),
      items: this.querySelectorAll('.disclosure__item a'),
    };
    this.elements.button.addEventListener('click', this.openSelector.bind(this));
    this.elements.button.addEventListener('focusout', this.closeSelector.bind(this));
    this.addEventListener('keyup', this.onContainerKeyUp.bind(this));

    // Attach click event to each language link
    this.elements.items.forEach(item => item.addEventListener('click', this.onItemClick.bind(this)));
  }

  hidePanel() {
    this.elements.button.setAttribute('aria-expanded', 'false');
    this.elements.panel.setAttribute('hidden', true);
  }

  onContainerKeyUp(event) {
    if (event.code.toUpperCase() !== 'ESCAPE') return;

    this.hidePanel();
    this.elements.button.focus();
  }

  onItemClick(event) {
    event.preventDefault();
    const form = this.querySelector('form');
    this.elements.input.value = event.currentTarget.dataset.value;
    if (form) form.submit();
  }

  openSelector() {
    this.elements.button.focus();
    this.elements.panel.toggleAttribute('hidden');
    const isExpanded = this.elements.button.getAttribute('aria-expanded') === 'false';
    this.elements.button.setAttribute('aria-expanded', isExpanded.toString());
  }

  closeSelector(event) {
    const shouldClose = event.relatedTarget && event.relatedTarget.nodeName === 'BUTTON';
    if (event.relatedTarget === null || shouldClose) {
      this.hidePanel();
    }
  }
}

customElements.define('localization-form', LocalizationForm);

</script>
